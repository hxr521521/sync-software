# [nginx基本配置与参数说明](http://www.cnblogs.com/xiaogangqq123/archive/2011/03/02/1969006.html)
# http://my.oschina.net/duxuefeng/blog/34880
# http://www.nginx.cn/591.html
#
# 启动 nginx
# nginx
#
# 修改配置后, 检查nginx配置是否正确
# nginx -t
#
# 重启 nginx
# nginx -s reload
#
# 关闭 nginx
# nginx -s stop

# 运行用户
#user  nobody;
# 启动进程,通常设置成和cpu的数量相等
worker_processes  4;
worker_rlimit_nofile 100000;

# 全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

# 工作模式及连接数上限
events {
    # 单个后台worker process进程的最大并发链接数
    worker_connections  4096;
}

http {
    server_tokens off;

    # 设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    # 设定日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    # 对于普通应用，必须设为 on,
    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    # 以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    # 连接超时时间
    keepalive_timeout  10;

    # 开启gzip压缩
    gzip on;
    gzip_disable "msie6";

    # gzip_static on;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_comp_level 4;

    gzip_types text/plain text/xml application/xml application/xml+rss text/css text/javascript application/json application/x-javascript;

    # 负载均衡后由于不同的服务器可能对同一个文件生成不同的 Entity Tag
    # 用户第一次从服务器 A 拿过的文件，第二次从服务器 B 拿时，服务器给出的 Entity Tag 有可能不同
    # 这就会造成重复下载，缓存形同虚设
    etag off;

    upstream apachephp {
        server domain.com:80;
    }

    # include conf.d/*.conf;

    # 设定虚拟主机配置
    server {
        # 侦听80端口
        listen       80;
        # 定义使用 localhost 访问
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # 默认请求
        location / {
            root   F:/site; # 目录分隔符统一使用 "/"
            # 定义首页索引文件的名称
            index  index.html;
        }
        # root 与 alias 的区别
        # alias 指定的目录是准确的, root 是指定目录的上级目录, 并且该上级目录要含有 location 指定名称的同名目录
        # 
        # 配置 root 会将 URL 中的 path 带入到 root 所配置的目录中
        # 也就是说 nginx 会组合 root 和 location 的路径
        # 例如: http://localhost/root/test.html ==nginx读取的文件目录==> F:/_tmp/root/test.html
        # 
        # root: full path is appended to the root including the location part
        # alias: only the portion of the path NOT including the location part is appended to the alias
        # http://wiki.nginx.org/HttpCoreModule#alias
        location /root {
            # root 指定目录是上级目录
            # 一般情况下, 在 location / 中配置root, 在location /other 中配置 alias 是一个好习惯
            root   E:/_tmp;
            index  index.html;
        }
        # 配置 alias 才更像是指定根目录
        # 即去掉 location 对应的那部分才是需要拼接的目录和文件
        # http://localhost/alias/test.html => F:/_tmp/test.html
        location /alias {
            alias  E:/_tmp;
            index  index.html;
        }

        # 反向代理后端接口
        location /proxy/ {
            # proxy_pass 带斜杠和不带斜杠是有区别的
            # http://www.amghost.cc/nginx-node-proxy_pass-setting/
            #
            # 带斜杠 -> with a URI: the location is replaced by the URI
            #           例如: location /proxy
            #                 proxy_pass http://localhost:8080/
            #
            #           proxy_pass 分解成两个部分: host "http://localhost:8080", URL "/"
            #           那么 http://localhost/proxy/a/index.jsp 转发到服务器上的请求
            #           先使用 URL "/"" 替代 location "/proxy"
            #           {http://localhost/proxy}/a/index.jsp => //a/index.jsp
            #           实际的服务器收到的请求为: {host}//a/index.jsp => http://localhost:8080//a/index.jsp
            #           但是我们发现服务器收到的请求的 URL 会多了一个斜杠, 这样有可能出现预想不到的问题
            #           以 JSP 为例
            #           getRequestURI: //a/index.jsp
            #           getRequestURL: http://localhost:8080//a/index.jsp
            # 
            #           因此注意 location 应该以斜杠结尾
            #           例如: location /proxy/
            #                 proxy_pass http://localhost:8080/
            #
            #           URI "/" host "http://localhost:8080" location "/proxy/"
            #           {http://localhost/proxy/}a/index.jsp => /a/index.jsp
            #           {host}/a/index.jsp => http://localhost:8080/a/index.jsp
            #           getRequestURI: /a/index.jsp
            #           getRequestURL: http://localhost:8080/a/index.jsp
            # 
            # 不带斜杠 -> without a URI: the request URI is passed to the server in the same form as sent by a client
            #             例如: location /proxy
            #                   proxy_pass http://localhost:8080
            #
            #             http://localhost/proxy/a/index.jsp
            #             服务器收到的请求为: http://localhost:8080/proxy/a/index.jsp
            #             getRequestURI: /proxy/a/index.jsp
            #             getRequestURL: http://localhost:8080/proxy/a/index.jsp
            proxy_pass http://localhost:8080/;  # with a URI
            # proxy_pass http://127.0.0.1:3000; # without a URI
            # proxy_pass http://apachephp/;     # 负载均衡
            # proxy_set_header Referer http://domain.com;
        }

        #error_page  404              /404.html;

        # 定义错误提示页面
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        #静态文件，nginx自己处理
        #location ~* \.(css|js|png|jpg|gif) {
            # 过期30天，静态文件不怎么更新，过期可以设大一点，
            # 如果频繁更新，则可以设置得小一点。
            # expires 1y;
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    # server_name 配合 hosts 修改, 支持同一个端口下多个域名(即虚拟主机 vhost 配置)
    # C:\Windows\System32\drivers\etc
    # 192.168.198.130 a.domain.net
    # 192.168.198.130 b.domain.net
    server {
        listen 80;
        server_name a.domain.net;
        location / {
            root E:/site1;
        }
    }
    server {
        listen 80;
        server_name b.domain.net;
        location / {
            root E:/site2;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
